---
import Icon from "../assets/icons/arrow.svg";

const {
  showArrow = true,
  variant = "primary",
  ariaLabel = "Knap", // fallback hvis man glemmer at s√¶tte det
  type,
  closePopUp,
  openPopUp,
} = Astro.props;

// Variant-baserede klasser
function getVariantClasses(
  variant: "primary" | "secondary" | "neutral" | "disabled"
): string {
  const base =
    "group flex-wrap p-button w-full sm:w-fit justify-center rounded-full flex items-center gap-medium transition-colors duration-400 ease-in-out";

  const variants = {
    primary:
      "bg-accent text-button text-primary p-button font-button-text hover:bg-accent-hover text-center",
    primaryFillOutline:
      "bg-accent text-button text-primary p-button font-button-text hover:bg-accent-hover text-center border border-primary",
    primaryOutline:
      "text-button text-primary p-button font-body-text border border-primary",
    secondary:
      "bg-transparent text-accent text-paragraph p-button border border-accent hover:border-accent-hover hover:bg-accent-hover hover:text-primary",
    neutral:
      "bg-accent text-button text-primary p-button font-button-text hover:bg-accent-hover",
    disabled: "bg-disabled text-button text-primary p-button font-button-text",
  };

  return `${base} ${variants[variant] || variants.primary}`;
}
---

    <button
      class={getVariantClasses(variant)}
      type={type}
      aria-label={ariaLabel}
      role="button"
      data-close-popup={closePopUp}
      data-open-popup={openPopUp}
      {...Astro.props}
    >
      <slot />
      {(variant === "primary" || variant === "primaryOutline") && showArrow && (
        <span class="transition-transform duration-500 ease-[cubic-bezier(0.25, 1, 0.5, 1)] group-hover:-translate-y-1 group-hover:translate-x-1">
          <Icon width="20" height="20" />
        </span>
      )}
    </button>

    