---
import { astroI18n, t } from "astro-i18n";
import Milk from "../../assets/icons/milk.svg";
import Gluten from "../../assets/icons/gluten-icon.svg";
import Nuts from "../../assets/icons/nuts-icon.svg";
import Fish from "../../assets/icons/fish-icon.svg";
import Vegetarian from "../../assets/icons/vegetarian-icon.svg";
import Vegan from "../../assets/icons/vegan-icon.svg";
import Checkbox from "./Checkbox.astro";
import Button from "../Button.astro";
import RadioButton from "./RadioButton.astro";
import PopUp from "../PopUp.astro";

const requestSuccess = Astro.url.searchParams.get("requestSend") || false;
---

<article>
  <PopUp show={requestSuccess} id="success-popup" textStyle="text-center" aria-live="polite" role="status">
    <h3>{t("Tak for din forespørgsel hos Kær Kaffebar")}</h3>
    <p>
      {t("Vi glæder os til at byde dig velkommen. Du vil høre fra os tilbage hurtigst muligt.")}
    </p>
  </PopUp>
  <!-- novalidate: fortæller browseren at vi selv gerne vil styre validering -->
  <form id="requestForm" method="POST" action="/api/request" class="py-large flex flex-col gap-large" novalidate>
    <!-- <h2 class="text-neutral-1 font-body-text text-header-2 leading-height-header-2">
      {t("Udfyld formular og send forespørgelse")}
    </h2> -->

    <fieldset class="flex flex-col gap-default">
      <legend class="sr-only">{t("Personlig information")}</legend>

      <!-- Fulde Navn -->
      <label for="fullName" class="mb-smal flex flex-col gap-small"
        ><p class="font-bold">{t("Fulde navn*")}</p>

        <input id="fullName" name="fullName" type="text" required aria-errormessage="fullNameError" aria-invalid="false" class="border-1 border-faded-highlight rounded-sm p-2 bg-white" />
      </label>
      <span id="fullNameError" class="error-message hidden" role="alert"></span>

      <!-- Email -->
      <label for="email" class="mb-smal flex flex-col gap-small"
        ><p class="font-bold">{t("Email*")}</p>
        <input id="email" name="email" type="email" required aria-errormessage="emailError" aria-invalid="false" class="border-1 border-faded-highlight rounded-sm p-2 bg-white" />
      </label>
      <span id="emailError" class="error-message hidden" role="alert"></span>

      <!-- Telefonnummer -->
      <label for="phoneNumber" class="mb-smal flex flex-col gap-small"
        ><p class="font-bold">{t("Telefonnummer*")}</p>
        <input id="phoneNumber" name="phoneNumber" type="tel" required pattern="[0-9+]{8,}" aria-errormessage="phoneNumberError" aria-invalid="false" class="border-1 border-faded-highlight rounded-sm p-2 bg-white" inputmode="numeric" />
      </label>
      <span id="phoneNumberError" class="error-message hidden" role="alert"></span>
    </fieldset>

    <!-- Andledning  -->
    <fieldset class="flex flex-wrap flex-col gap-default">
      <legend class="text-header-3">{t("Anledning*")}</legend>
      <RadioButton Occasion={t("Arrangement")} />
      <RadioButton Occasion={t("Catering")} />
      <RadioButton Occasion={t("Event")} />
      <RadioButton Occasion={t("Kage og bestilling")} />
    </fieldset>

    <!-- Tid og dato  -->
    <fieldset class="flex flex-col gap-default">
      <legend class="sr-only">{t("Tid og Dato*")}</legend>

      <label class="mb-smal flex flex-col lg:w-1/2 gap-small">
        <p class="font-bold">{t("Tid*")}</p>
        <input id="time" name="time" type="time" required aria-errormessage="timeError" aria-invalid="false" class="border-1 border-faded-highlight rounded-sm p-2 bg-white" min="10:00" max="16:00" />
      </label>
      <span id="timeError" class="error-message hidden" role="alert"></span>

      <label class="mb-smal flex flex-col lg:w-1/2 gap-small"
        ><p class="font-bold">{t("Dato*")}</p>
        <input id="date" name="date" type="date" required aria-errormessage="dateError" aria-invalid="false" class="border-1 border-faded-highlight rounded-sm p-2 bg-white" min={new Date().toISOString().split("T")[0]} />
      </label>
      <span id="dateError" class="error-message hidden" role="alert"></span>
    </fieldset>

    <!-- Allergier  -->
    <fieldset class="flex flex-wrap items-end gap-default">
      <legend class="text-header-3">{t("Allergier")}</legend>
      <Checkbox Diet={t("Laktose")} Icon={Milk} aria-Label={t("Laktosefri")} />
      <Checkbox Diet={t("Gluten")} Icon={Gluten} aria-Label={t("Glutenfri")} />
      <Checkbox Diet={t("Nødder")} Icon={Nuts} aria-Label={t("Nøddefri")} />
      <Checkbox Diet={t("Fisk")} Icon={Fish} aria-Label={t("Fiskfri")} />
    </fieldset>

    <!-- Menu ønsker  -->
    <fieldset class="flex flex-wrap items-end gap-default">
      <legend class="text-header-3">{t("Ønsker til menuen")}</legend>
      <Checkbox Diet={t("Vegetarisk")} Icon={Vegetarian} aria-Label={t("Vegetarisk")} />
      <Checkbox Diet={t("Vegansk")} Icon={Vegan} aria-Label={t("Vegansk")} />
    </fieldset>

    <!-- diverse kommentar fra brugerens input -->
    <fieldset class="flex flex-col mb-smal font-bold gap-default">
      <legend class="text-paragraph">{t("Kommentar")}</legend>
      <label id="comment" for="comment" class="sr-only">{t("Kommentar")}</label>
      <textarea id="comment" name="comment" rows="4" class="border-1 border-faded-highlight rounded-sm p-2 bg-white" placeholder={t("Skriv dine kommentarer her...")}></textarea>
    </fieldset>

    <p class="font-body-text text-neutral-1 text-paragraph font-bold">
      {t("Obs: Hvis du har nogen spørgsmål eller bekymringer så kontakt os på 81 61 09 00")}
    </p>
    <article class="flex justify-center">
      <!-- Submit / Send Forespørgelse / check validering -->
      <Button type="submit" showArrow={true} variant="primary" ariaLabel={t("Send forespørgelse")}> {t("Send forespørgelse")}</Button>
    </article>
  </form>
</article>

<style>
  /* Error farve*/
  .error-message {
    color: var(--color-secondary);
  }
  .error-message.hidden {
    display: none;
  }
  /*Invalide felter */
  input.invalid,
  textarea.invalid {
    border: 2px solid var(--color-secondary) !important;
  }

  /*Valide felter. Anvender pseudo valid og sætter invalid til false (kigger i vores script).
   !important bruger vi til at vise stilen tydeligt */
  input:valid[aria-invalid="false"],
  textarea:valid[aria-invalid="false"] {
    border: 2px solid var(--color-accent) !important;
  }
</style>

<script is:inline>
  // laver fores form til en konstant. DOM skal være helt færdig loaded før vi henter vores elementer.
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("requestForm");
    // Boolean variabel der kigger om brugeren har sendt formularen
    let submitted = false;

    // Array af inputfelter som vi skal se på der skal valideres (vores id'er)
    const fields = ["fullName", "email", "phoneNumber", "time", "date"];
    // Eventlistener med prevent default så vi lige kan selv tjekke vores form.
    form.addEventListener("submit", (e) => {
      // Håndtere prevent default dvs. vi forhindre at den sendes automatisk.
      e.preventDefault();
      submitted = true;
      // Variabel for at fortælle at alle inputfelter er valide
      let allValid = true;
      // kontrollere hvert inputfelt med checkValidity()
      // vi laver så også konstanter til at visualisere vores errors
      fields.forEach((id) => {
        const field = document.getElementById(id);
        const span = document.getElementById(id + "Error");
        // Vi bruger checkValidity() til at kontrollere om vores felter er valide. Den kigger på vores HTML og kigger på vores type, pattern og required.
        // Hvis field ikke er validerede så sæt boolean til false og tilføje invalid style
        if (!field.checkValidity()) {
          allValid = false;
          field.classList.add("invalid");
          // vi bruger aria-invalid for at gøre det mere a11y venlig
          field.setAttribute("aria-invalid", "true");
          span.classList.remove("hidden");
          // error besked: hvad brugeren skal gøre/mangler
          span.textContent = field.validationMessage;
          //ellers valider
        } else {
          field.classList.remove("invalid");
          field.setAttribute("aria-invalid", "false");
          span.classList.add("hidden");
        }
      });

      // Hvis alle vores felter er valide så send formen ud
      if (allValid) form.submit();
    });

    // For hver gang brugeren så klikker på submit sker valideringen i øjeblikket
    // for hver field med id parameter
    fields.forEach((id) => {
      // konstanter til at tag fat i vores elementer med id
      const field = document.getElementById(id);
      const span = document.getElementById(id + "Error");
      // Eventlistener med input. 'lytter' til hvad vores inputfelter.
      field.addEventListener("input", () => {
        // Fejlen kommer først frem efter førsøg på at brugeren klikker submit
        if (!submitted) return;
        // Gyldig input felt får så valid CSS styling & aria-invalid er false.
        if (field.checkValidity()) {
          field.classList.remove("invalid");
          field.setAttribute("aria-invalid", "false");
          span.classList.add("hidden");
          // Ugyldig input felt får så 'valid' CSS styling & aria-invalid er true.
        } else {
          field.classList.add("invalid");
          field.setAttribute("aria-invalid", "true");
          span.classList.remove("hidden");
          // error besked: hvad brugeren skal gøre/mangler : bruger vores property validationMessage
          span.textContent = field.validationMessage;
        }
      });
    });
  });
</script>
